// <auto-generated />
using System;
using Infraestructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infraestructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250824215201_FixNvarcharTypes")]
    partial class FixNvarcharTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Calificacion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Concept")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CursoEstudianteId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IdCursoEstudiante")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CursoEstudianteId");

                    b.ToTable("Calificaciones");
                });

            modelBuilder.Entity("Domain.Entities.Curso", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IdProfesor")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("IdProfesor");

                    b.HasIndex("StartDate");

                    b.ToTable("Curso", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.CursoEstudiante", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EnrollmentDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("IdCurso")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdEstudiante")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DateAdded");

                    b.HasIndex("EnrollmentDate");

                    b.HasIndex("IdCurso");

                    b.HasIndex("IdEstudiante");

                    b.ToTable("CursoEstudiante", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Surnames")
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("DateAdded");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex("EntryDate");

                    b.ToTable("Estudiante", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateAdded = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "99888923",
                            Email = "example@domain.co",
                            EntryDate = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Names = "Andrés Leonardo",
                            Surnames = "Arias Uribe"
                        },
                        new
                        {
                            Id = 2L,
                            DateAdded = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "998889223",
                            Email = "example@domain.co",
                            EntryDate = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Names = "David Alfonso",
                            Surnames = "Cárdenas Suarez"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Profesor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentId")
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime?>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Names")
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Surnames")
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("DateAdded");

                    b.HasIndex("DocumentId")
                        .IsUnique()
                        .HasFilter("[DocumentId] IS NOT NULL");

                    b.HasIndex("EntryDate");

                    b.ToTable("Profesor", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateAdded = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "77882323",
                            Email = "example@domain.co",
                            EntryDate = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Names = "Maria",
                            Surnames = "Chavez"
                        },
                        new
                        {
                            Id = 2L,
                            DateAdded = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DocumentId = "1237676",
                            Email = "example@domain.co",
                            EntryDate = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Local),
                            Names = "Henry Andres",
                            Surnames = "Hernandez Hernandez"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Usuario", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateLastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("DateAdded");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("Usuario", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateAdded = new DateTime(2025, 8, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Password = "B9A465912169BEF97138C76EFDFD5BB34FDC5FA58855AC187817AE07E80ABE5E-5929B1B6239B2767DDEDDABC98823ADF",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Domain.Entities.Calificacion", b =>
                {
                    b.HasOne("Domain.Entities.CursoEstudiante", "CursoEstudiante")
                        .WithMany("Calificaciones")
                        .HasForeignKey("CursoEstudianteId");

                    b.Navigation("CursoEstudiante");
                });

            modelBuilder.Entity("Domain.Entities.Curso", b =>
                {
                    b.HasOne("Domain.Entities.Profesor", "Profesor")
                        .WithMany("Cursos")
                        .HasForeignKey("IdProfesor")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Profesor");
                });

            modelBuilder.Entity("Domain.Entities.CursoEstudiante", b =>
                {
                    b.HasOne("Domain.Entities.Curso", "Curso")
                        .WithMany("Matriculas")
                        .HasForeignKey("IdCurso")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Domain.Entities.Estudiante", "Estudiante")
                        .WithMany("Matriculas")
                        .HasForeignKey("IdEstudiante")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Curso");

                    b.Navigation("Estudiante");
                });

            modelBuilder.Entity("Domain.Entities.Curso", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("Domain.Entities.CursoEstudiante", b =>
                {
                    b.Navigation("Calificaciones");
                });

            modelBuilder.Entity("Domain.Entities.Estudiante", b =>
                {
                    b.Navigation("Matriculas");
                });

            modelBuilder.Entity("Domain.Entities.Profesor", b =>
                {
                    b.Navigation("Cursos");
                });
#pragma warning restore 612, 618
        }
    }
}
